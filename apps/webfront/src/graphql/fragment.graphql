fragment Block on Blocks {
	id
	objectUrl
	recordingId
	thumbnail
	playbackDuration
}

fragment FlickFragment on Fragment {
	configuration
	description
	flickId
	id
	name
	order
	type
	producedLink
	producedShortsLink
	editorState
	editorValue
	encodedEditorValue
	thumbnailConfig
	thumbnailObject
	publishConfig
	version
	participants {
		...FragmentParticipant
	}
	blocks {
		...Block
	}
	flick {
		name
		description
	}
}

fragment Recording on Recording {
	id
	fragmentId
	type
	url
	status
	checkpoint
	thumbnail
	storyboard
}

query GetRecordings($flickId: uuid, $fragmentId: uuid) {
	Recording(
		where: { flickId: { _eq: $flickId }, fragmentId: { _eq: $fragmentId } }
	) {
		...Recording
	}
}

mutation SaveRecordedBlock(
	$flickId: uuid!
	$fragmentId: uuid!
	$objectUrl: String!
	$recordingId: uuid!
	$blockId: String!
	$thumbnail: String
	$playbackDuration: Float
) {
	SaveBlock(
		flickId: $flickId
		fragmentId: $fragmentId
		objectUrl: $objectUrl
		recordingId: $recordingId
		thumbnail: $thumbnail
		blockId: $blockId
		playbackDuration: $playbackDuration
	) {
		id
		success
	}
}

mutation SaveMultipleBlocks(
	$blocks: [json]!
	$flickId: uuid!
	$fragmentId: uuid!
	$recordingId: uuid!
	$url: String!
) {
	SaveMultiBlocks(
		blocks: $blocks
		flickId: $flickId
		fragmentId: $fragmentId
		recordingId: $recordingId
		url: $url
	) {
		success
	}
}

mutation DeleteBlockGroup($objectUrl: String!, $recordingId: uuid!) {
	RetakeMultiBlocks(objectUrl: $objectUrl, recordingId: $recordingId) {
		success
	}
}

mutation SetupRecording(
	$contentType: CONTENT_TYPES!
	$editorState: json!
	$flickId: uuid!
	$fragmentId: uuid!
	$viewConfig: json!
) {
	StartRecording(
		contentType: $contentType
		flickId: $flickId
		fragmentId: $fragmentId
		editorState: $editorState
		viewConfig: $viewConfig
	) {
		recordingId
		success
	}
}

mutation UpdateThumbnail($id: uuid!, $thumbnailConfig: json!) {
	update_Fragment_by_pk(
		pk_columns: { id: $id }
		_set: { thumbnailConfig: $thumbnailConfig }
	) {
		id
	}
}

mutation UpdateThumbnailObject($id: uuid!, $thumbnailObject: String!) {
	update_Fragment_by_pk(
		pk_columns: { id: $id }
		_set: { thumbnailObject: $thumbnailObject }
	) {
		id
	}
}
