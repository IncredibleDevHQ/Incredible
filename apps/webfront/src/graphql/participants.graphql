fragment FlickParticipant on User {
	displayName
	picture
	username
	email
	sub
}

fragment FlickParticipants on Participant {
	id
	status
	role
	userSub
	owner
	inviteStatus
	user {
		...FlickParticipant
	}
}

fragment FragmentParticipant on Fragment_Participant {
	participant {
		...FlickParticipants
	}
}

fragment FilteredUser on User {
	displayName
	email
	picture
	sub
	username
}

query GetFlickParticipants($flickId: uuid!) {
	Participant(
		where: { flickId: { _eq: $flickId } }
		order_by: { user: { displayName: asc } }
	) {
		...FlickParticipants
	}
}

mutation RemoveFlickParticipant($flickId: uuid!, $userId: String!) {
	RemoveParticipant(flickId: $flickId, userId: $userId) {
		success
	}
}

mutation TransferFlickOwnership($flickId: uuid!, $newOwnerId: String!) {
	TransferOwnership(flickId: $flickId, newOwnerId: $newOwnerId) {
		success
	}
}

query GetFilteredUsers($_ilike: String!) {
	User(
		where: {
			_or: [
				{ displayName: { _ilike: $_ilike } }
				{ username: { _ilike: $_ilike } }
			]
		}
		limit: 3
	) {
		...FilteredUser
	}
}

mutation CollaborateWithUser(
	$receiverId: String!
	$senderId: String!
	$collaborationType: CollaborationTypes!
	$contentType: ContentContainerTypes!
	$isNew: Boolean!
	$title: String
	$description: String
	$flickId: uuid
	$seriesId: uuid
	$message: String
) {
	Collaborate(
		receiverId: $receiverId
		senderId: $senderId
		seriesId: $seriesId
		title: $title
		message: $message
		isNew: $isNew
		flickId: $flickId
		description: $description
		collaborationType: $collaborationType
		contentType: $contentType
	) {
		success
	}
}

mutation EmailInviteGuestUser($email: String!, $flickId: String!) {
	InviteWithEmail(email: $email, flickId: $flickId) {
		success
	}
}

query GetPendingInvites($flickId: uuid!) {
	Invitations(
		where: {
			_and: { flickId: { _eq: $flickId }, status: { _in: [Pending, Email] } }
		}
	) {
		receiver {
			email
			sub
			displayName
			picture
		}
	}
}
