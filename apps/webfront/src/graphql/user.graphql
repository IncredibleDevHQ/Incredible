fragment Me on MeOutput {
	createdAt
	displayName
	email
	onboarded
	picture
	provider
	sub
	username
	updatedAt
	designation
	organization
}

fragment UserProfile on Profile {
	about
	coverImage
	githubProfile
	hashnodeProfile
	id
	linkedinProfile
	mediumProfile
	tags
	title
	twitterProfile
}

fragment User on User {
	picture
	displayName
	username
	sub
	profile {
		...UserProfile
	}
}

query UserProfile($username: String!) {
	Flick(
		where: { participants: { user: { username: { _eq: $username } } } }
		order_by: { updatedAt: desc }
	) {
		...PublicSeriesFlick
	}
	User(where: { username: { _eq: $username } }) {
		...User
		series(order_by: { updatedAt: desc }) {
			...SeriesFragment
		}
	}
}

subscription GetUserYTIntegration {
	YoutubeIntegration {
		id
		userInfo
	}
}

query IsUsernameAvailable($username: String!) {
	UsernameAvailability(username: $username) {
		message
		suggestion
		valid
	}
}

query CheckFollow($followerId: String!, $targetId: String!) {
	Follow(
		where: { followerId: { _eq: $followerId }, targetId: { _eq: $targetId } }
	) {
		followerId
	}
}

query CheckFollowByIds($followerId: String!, $targetId: [String!]) {
	Follow(
		where: { followerId: { _eq: $followerId }, targetId: { _in: $targetId } }
	) {
		targetId
	}
}

mutation UserOnBoarding(
	$designation: String = ""
	$name: String!
	$organization: String = ""
	$profilePicture: String!
	$username: String!
) {
	UserOnboarding(
		designation: $designation
		name: $name
		organization: $organization
		profilePicture: $profilePicture
		userName: $username
	) {
		success
	}
}

mutation Follow($targetId: String!, $followerId: String!) {
	FollowUser(targetId: $targetId, followerId: $followerId) {
		success
	}
}

mutation Unfollow($followerId: String!, $targetId: String!) {
	UnfollowUser(followerId: $followerId, targetId: $targetId) {
		success
	}
}
