fragment MyNotification on Notifications {
  id
  type
  isRead
  createdAt
  message
  meta
  metaType
  sender {
    sub
    picture
    displayName
    username
  }
}

query GetTokenisedCode($code: String!, $language: String!, $theme: String) {
  TokenisedCode(code: $code, language: $language, theme: $theme) {
    success
    data
  }
}

query GetLatestFlick($sub: String!) {
  Flick(
    where: {
      startAt: { _gte: "now()" }
      participants: { userSub: { _eq: $sub } }
    }
    order_by: { startAt: asc }
    limit: 1
  ) {
    ...Flick
  }
}
query GetFlickByJoinLink($joinLink: String!) {
  Flick(where: { joinLink: { _eq: $joinLink } }) {
    ...PublicFlick
    participants {
      user {
        displayName
        picture
      }
    }
  }
}

query GetImagesFromUnsplash($query: String!) {
  SearchUnsplash(query: $query) {
    results
  }
}

query GetMyNotifications($limit: Int = 15) {
  Notifications(order_by: { createdAt: desc }, limit: $limit) {
    ...MyNotification
  }
}

query GetAllMyNotifications($limit: Int = 25, $offset: Int = 0) {
  Notifications(order_by: { createdAt: desc }, limit: $limit, offset: $offset) {
    ...MyNotification
  }
}

subscription MyUnreadNotificationsCount {
  Notifications_aggregate(where: { isRead: { _eq: false } }) {
    aggregate {
      count
    }
  }
}

mutation MarkNotificationAsRead($id: uuid!) {
  update_Notifications_by_pk(pk_columns: { id: $id }, _set: { isRead: true }) {
    id
  }
}

mutation CollaborateWithUser(
  $receiverId: String!
  $senderId: String!
  $collaborationType: CollaborationTypes!
  $contentType: ContentContainerTypes!
  $isNew: Boolean!
  $title: String
  $description: String
  $flickId: uuid
  $seriesId: uuid
  $message: String
) {
  Collaborate(
    receiverId: $receiverId
    senderId: $senderId
    seriesId: $seriesId
    title: $title
    message: $message
    isNew: $isNew
    flickId: $flickId
    description: $description
    collaborationType: $collaborationType
    contentType: $contentType
  ) {
    success
  }
}

mutation AcceptCollaboration($notificationId: String!, $inviteId: String!) {
  RespondToCollaboration(
    inviteId: $inviteId
    notificationId: $notificationId
    status: Accepted
  ) {
    success
  }
}

mutation UploadFile($key: String!) {
  UploadFile(key: $key) {
    success
    url
  }
}

mutation ProduceVideo($flickId: uuid!) {
  ProduceVideo(flickId: $flickId) {
    id
  }
}

mutation GetRTCToken($fragmentId: uuid!, $flickId: uuid!) {
  RTCToken(fragmentId: $fragmentId, flickId: $flickId) {
    token
    success
  }
}

mutation SubToVideoEmails(
  $id: String!
  $email: String!
  $targetType: TargetType!
) {
  Subscribe(email: $email, id: $id, targetType: $targetType) {
    success
  }
}

mutation GetSuggestedText($text: String!) {
  SuggestPhrase(text: $text) {
    suggestion
  }
}

mutation GetCodeExplanation($code: String!) {
  ExplainCode(code: $code) {
    description
  }
}

mutation DownloadZip($flickId: uuid!, $objectNames: [String!]!) {
  DownloadFlick(flickId: $flickId, objectNames: $objectNames) {
    success
  }
}
