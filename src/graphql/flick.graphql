fragment PublicFlick on Flick {
  color
  description
  joinLink
  lobbyPicture
  id
  name
  scope
  plannedEnd
  startAt
  updatedAt
  status
  deletedAt
  producedLink
  participants {
    user {
      picture
    }
  }
}

fragment BaseFlick on Flick {
  color
  description
  joinLink
  lobbyPicture
  id
  name
  scope
  plannedEnd
  startAt
  ownerId
  owner {
    userSub
  }
  updatedAt
  status
  deletedAt
  producedLink
  configuration
  participants {
    user {
      picture
      email
    }
  }
}

fragment FlickActivity on FlickActivity {
  id
  title
  description
  type
  createdAt
  flickId
  fragmentId
}

fragment Flick on Flick {
  ...BaseFlick
  participants {
    ...FlickParticipants
  }
  fragments(order_by: { order: asc }) {
    ...FlickFragment
  }
}

query GetMyFlicks($limit: Int, $userId: String) {
  Flick(limit: $limit) {
    id
    name
    description
  }
}

query GetFlickById($id: uuid!) {
  Flick_by_pk(id: $id) {
    ...Flick
  }
}

query GetUpcomingUserFlicks($sub: String!) {
  Flick(
    where: {
      startAt: { _gte: "now()" }
      participants: { userSub: { _eq: $sub } }
    }
    order_by: { startAt: asc }
  ) {
    ...Flick
  }
}

query GetUserFlicks($sub: String!) {
  Flick(
    where: {
      participants: { userSub: { _eq: $sub } }
      deletedAt: { _is_null: true }
    }
    order_by: { startAt: desc }
  ) {
    ...Flick
  }
}

query GetUserPublicFlicks($userId: String!) {
  Flick(
    where: {
      scope: { _eq: Public }
      owner: { userSub: { _eq: $userId } }
      deletedAt: { _is_null: true }
    }
    order_by: { startAt: asc }
  ) {
    ...Flick
  }
}

query SeriesFlicks($id: uuid!) {
  Flick_Series(
    where: {
      seriesId: { _eq: $id }
      flick: { deletedAt: { _is_null: true }, scope: { _eq: Public } }
    }
  ) {
    order
    flick {
      ...BaseFlick
    }
  }
}

query SeriesFlickCount($seriesId: uuid) {
  Flick_Series_aggregate(where: { seriesId: { _eq: $seriesId } }) {
    aggregate {
      count(columns: flickId)
    }
  }
}

query GetFlickFragments($flickId: uuid!) {
  Fragment(where: { flickId: { _eq: $flickId } }) {
    ...FlickFragment
  }
}

mutation CreateNewFlick(
  $name: String!
  $description: String
  $scope: CreateFlickFlickScopeEnumEnum!
  $seriesId: uuid
  $configuration: json
) {
  CreateFlick(
    name: $name
    scope: $scope
    description: $description
    seriesId: $seriesId
    configuration: $configuration
  ) {
    id
  }
}

mutation UpdateSeriesFlick($flickIds: [uuid!]!, $seriesId: uuid!) {
  UpdateSeriesFlicks(flickIds: $flickIds, seriesId: $seriesId) {
    success
  }
}

mutation InviteParticipantToFlick(
  $email: String!
  $flickId: String!
  $role: InviteParticipantRoleEnum!
) {
  InviteParticipant(email: $email, flickId: $flickId, role: $role) {
    id
  }
}

query FlickActivity($flickId: uuid!) {
  FlickActivity(
    where: { flickId: { _eq: $flickId } }
    order_by: { createdAt: desc }
  ) {
    ...FlickActivity
  }
}
fragment Note on Note {
  id
  note
  sourceUrl
  participant {
    id
    userSub
    user {
      picture
      displayName
    }
  }
}

query GetFragmentNotes($fragmentId: uuid!) {
  Note(where: { fragmentId: { _eq: $fragmentId } }) {
    ...Note
  }
}

query GetFlickParticipants($flickId: uuid!) {
  Participant(
    where: { flickId: { _eq: $flickId } }
    order_by: { user: { displayName: asc } }
  ) {
    ...FlickParticipants
  }
}

mutation UpdateFlick(
  $flickId: String!
  $name: String!
  $organisationSlug: String
  $scope: UpdateFlickScopeEnum
  $difficulty: UpdateFlickDifficultyEnum
) {
  UpdateFlick(
    flickId: $flickId
    name: $name
    organisationSlug: $organisationSlug
    scope: $scope
    difficulty: $difficulty
  ) {
    id
  }
}

mutation DeleteFlick($flickId: uuid!) {
  DeleteFlick(flickId: $flickId) {
    id
  }
}

mutation UpdateFlick(
  $flickId: String!
  $name: String!
  $organisationSlug: String
  $scope: UpdateFlickScopeEnum
  $difficulty: UpdateFlickDifficultyEnum
) {
  UpdateFlick(
    flickId: $flickId
    name: $name
    organisationSlug: $organisationSlug
    scope: $scope
    difficulty: $difficulty
  ) {
    id
  }
}

mutation UpdateParticipantRole(
  $participantId: String!
  $flickId: String!
  $role: UpdateParticipantRoleEnum!
) {
  UpdateParticipantRole(
    flickId: $flickId
    participantId: $participantId
    role: $role
  ) {
    id
  }
}
