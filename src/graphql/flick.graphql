fragment BaseFlick on Flick {
  color
  description
  joinLink
  lobbyPicture
  id
  name
  scope
  plannedEnd
  startAt
  status
  producedLink
}

fragment FlickActivity on FlickActivity {
  id
  title
  description
  type
  createdAt
  flickId
  fragmentId
}

fragment Flick on Flick {
  ...BaseFlick
  participants {
    ...FlickParticipants
  }
  fragments(order_by: { order: asc }) {
    ...FlickFragment
  }
}

query GetMyFlicks($limit: Int) {
  Flick(limit: $limit) {
    id
    name
    description
  }
}

query GetFlickById($id: uuid!) {
  Flick_by_pk(id: $id) {
    ...Flick
  }
}

query GetUpcomingUserFlicks($sub: String!) {
  Flick(
    where: {
      startAt: { _gte: "now()" }
      participants: { userSub: { _eq: $sub } }
    }
    order_by: { startAt: asc }
  ) {
    ...Flick
  }
}

query GetUserFlicks($sub: String!) {
  Flick(
    where: { participants: { userSub: { _eq: $sub } } }
    order_by: { startAt: desc }
  ) {
    ...Flick
  }
}

query GetUserPublicFlicks($sub: String!) {
  Flick(
    where: { participants: { userSub: { _eq: $sub } }, scope: { _eq: Public } }
    order_by: { startAt: asc }
  ) {
    ...Flick
  }
}

query SeriesFlicks($id: uuid) {
  Flick_Series(where: { seriesId: { _eq: $id } }) {
    flickId
    order
    flick {
      id
      producedLink
      name
      previewLink
      description
    }
  }
}

query SeriesFlickCount($seriesId: uuid) {
  Flick_Series_aggregate(where: { seriesId: { _eq: $seriesId } }) {
    aggregate {
      count(columns: flickId)
    }
  }
}

mutation CreateNewFlick(
  $name: String!
  $description: String!
  $scope: CreateFlickFlickScopeEnumEnum!
) {
  CreateFlick(name: $name, scope: $scope, description: $description) {
    id
  }
}

mutation UpdateSeriesFlick($flickIds: [uuid!]!, $seriesId: uuid!) {
  UpdateSeriesFlicks(flickIds: $flickIds, seriesId: $seriesId) {
    success
  }
}

mutation InviteParticipantToFlick($email: String!, $flickId: String!) {
  InviteParticipant(email: $email, flickId: $flickId) {
    id
  }
}

query FlickActivity($flickId: uuid!) {
  FlickActivity(
    where: { flickId: { _eq: $flickId } }
    order_by: { createdAt: desc }
  ) {
    ...FlickActivity
  }
}
fragment Note on Note {
  id
  note
  sourceUrl
  participant {
    id
    userSub
    user {
      picture
      displayName
    }
  }
}

query GetFragmentNotes($fragmentId: uuid!) {
  Note(where: { fragmentId: { _eq: $fragmentId } }) {
    ...Note
  }
}
