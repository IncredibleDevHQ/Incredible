fragment PublicUser on User {
  displayName
  picture
  username
}

fragment GuestUser on User {
  sub
  username
  verified
  email
}

fragment FlickParticipant on User {
  ...PublicUser
  email
  sub
}

fragment User on MeOutput {
  createdAt
  displayName
  email
  onboarded
  picture
  provider
  sub
  username
  updatedAt
  designation
  organization
}

query GetUser {
  Me {
    ...User
    verificationStatus
  }
}

fragment FilteredUser on User {
  displayName
  email
  picture
  sub
  username
}

query GetFilteredUsers($_ilike: String!) {
  User(
    where: {
      _or: [
        { displayName: { _ilike: $_ilike } }
        { username: { _ilike: $_ilike } }
      ]
    }
    limit: 3
  ) {
    ...FilteredUser
  }
}

query IsUsernameAvailable($username: String!) {
  UsernameAvailability(username: $username) {
    message
    suggestion
    valid
  }
}

query GetGuestUser($state: String!) {
  User(where: { state: { _eq: $state } }) {
    ...GuestUser
  }
}

query FetchEmailUsingState($state: String!) {
  FetchEmailUsingState(state: $state) {
    email
  }
}

query SendMagicSignInLink($email: String!) {
  SendMagicLink(email: $email) {
    success
  }
}

query GetUserPreferences($sub: String = "") {
  User(where: { sub: { _eq: $sub } }) {
    preferences
  }
  Branding {
    branding
    id
    name
  }
}

subscription GetUserYTIntegration {
  YoutubeIntegration {
    id
    userInfo
  }
}

mutation UpdateUserPreferences($sub: String!, $preferences: json!) {
  update_User_by_pk(
    pk_columns: { sub: $sub }
    _set: { preferences: $preferences }
  ) {
    preferences
  }
}

mutation UpdateOnboardingUser(
  $sub: String!
  $displayName: String!
  $username: String!
) {
  update_User_by_pk(
    pk_columns: { sub: $sub }
    _set: { displayName: $displayName, username: $username }
  ) {
    updatedAt
  }
}

mutation SetOnboarding {
  Onboarded {
    success
  }
}

mutation UpdateProfile(
  $displayName: String!
  $userId: String!
  $designation: String
  $organization: String
) {
  update_User(
    _set: {
      displayName: $displayName
      designation: $designation
      organization: $organization
    }
    where: { sub: { _eq: $userId } }
  ) {
    affected_rows
  }
}

mutation AddEmailToWaitlist($email: String!) {
  AddToWaitlist(email: $email) {
    success
  }
}

mutation CollaborateWithUser(
  $receiverId: String!
  $senderId: String!
  $collaborationType: CollaborationTypes!
  $contentType: ContentContainerTypes!
  $isNew: Boolean!
  $title: String
  $description: String
  $flickId: uuid
  $seriesId: uuid
  $message: String
) {
  Collaborate(
    receiverId: $receiverId
    senderId: $senderId
    seriesId: $seriesId
    title: $title
    message: $message
    isNew: $isNew
    flickId: $flickId
    description: $description
    collaborationType: $collaborationType
    contentType: $contentType
  ) {
    success
  }
}

mutation EmailInviteGuestUser($email: String!, $flickId: String!) {
  InviteWithEmail(email: $email, flickId: $flickId) {
    success
  }
}

query GetPendingInvites($flickId: uuid!) {
  Invitations(
    where: {
      _and: { flickId: { _eq: $flickId }, status: { _in: [Pending, Email] } }
    }
  ) {
    receiver {
      email
      sub
      displayName
      picture
    }
  }
}
