fragment FragmentParticipant on Fragment_Participant {
  participant {
    ...FlickParticipants
  }
}

fragment SimpleFragment on Fragment {
  id
  name
  type
}

fragment Block on Blocks {
  id
  objectUrl
  recordingId
  thumbnail
  playbackDuration
}

fragment FlickFragment on Fragment {
  configuration
  description
  flickId
  id
  name
  order
  type
  producedLink
  producedShortsLink
  editorState
  editorValue
  encodedEditorValue
  thumbnailConfig
  thumbnailObject
  publishConfig
  version
  participants {
    ...FragmentParticipant
  }
  blocks {
    ...Block
  }
  flick {
    name
    description
  }
}

fragment StudioFragment on Fragment {
  ...FlickFragment
  flick {
    ...BaseFlick
  }
}

fragment Note on Note {
  id
  note
  sourceUrl
  createdAt
  participant {
    id
    userSub
    user {
      picture
      displayName
    }
  }
}

fragment RecordedBlocks on Blocks {
  id
  objectUrl
  thumbnail
  updatedAt
}

fragment Recording on Recording {
  id
  fragmentId
  type
  url
  status
  checkpoint
  thumbnail
  storyboard
}

query GetFragmentById($id: uuid!, $sub: String!) {
  Fragment(
    where: {
      _and: {
        id: { _eq: $id }
        flick: { participants: { userSub: { _eq: $sub } } }
      }
    }
  ) {
    ...StudioFragment
  }
}

query GetFlickFragment($id: uuid!) {
  Fragment_by_pk(id: $id) {
    ...FlickFragment
  }
}

query FragmentRole($fragmentId: uuid!, $sub: String!) {
  Participant(
    where: {
      _and: {
        fragments: {
          fragmentId: { _eq: $fragmentId }
          participant: { userSub: { _eq: $sub } }
        }
      }
    }
  ) {
    role
  }
}

query GetFragmentList($flickId: uuid!) {
  Fragment(where: { flickId: { _eq: $flickId } }) {
    ...SimpleFragment
  }
}

query GetFragmentParticipants($fragmentId: uuid!) {
  Fragment_Participant(where: { fragmentId: { _eq: $fragmentId } }) {
    participant {
      ...FlickParticipants
    }
  }
}

query GetFragmentNotes($fragmentId: uuid!) {
  Note(where: { fragmentId: { _eq: $fragmentId } }) {
    ...Note
  }
}

query GetRecordings($flickId: uuid, $fragmentId: uuid) {
  Recording(
    where: { flickId: { _eq: $flickId }, fragmentId: { _eq: $fragmentId } }
  ) {
    ...Recording
  }
}

query GetRecordedBlocks($recordingId: uuid) {
  Blocks(where: { recordingId: { _eq: $recordingId } }) {
    ...RecordedBlocks
  }
}

mutation UpdateFragmentName($id: uuid!, $name: String!) {
  update_Fragment_by_pk(pk_columns: { id: $id }, _set: { name: $name }) {
    id
  }
}

mutation AddNote($note: Note_insert_input = {}) {
  insert_Note_one(object: $note) {
    id
  }
}

mutation UpdateNote($id: uuid!, $note: String!) {
  update_Note(where: { id: { _eq: $id } }, _set: { note: $note }) {
    affected_rows
  }
}

mutation DeleteNote($id: uuid!) {
  delete_Note_by_pk(id: $id) {
    id
  }
}

mutation AddFragmentToFlick(
  $type: FRAGMENT_TYPE_ENUM_enum!
  $order: Int!
  $name: String!
  $flickId: uuid!
  $description: String!
) {
  insert_Fragment_one(
    object: {
      name: $name
      order: $order
      type: $type
      flickId: $flickId
      description: $description
    }
  ) {
    createdAt
  }
}

mutation MarkFragmentCompleted(
  $id: uuid!
  $producedLink: String!
  $duration: float8!
) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: {
      status: Completed
      producedLink: $producedLink
      duration: $duration
    }
  ) {
    updatedAt
  }
}

mutation UpdateFragmentShort(
  $id: uuid!
  $producedShortsLink: String!
  $duration: float8!
) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { producedShortsLink: $producedShortsLink, shortsDuration: $duration }
  ) {
    updatedAt
  }
}

mutation AddConfiguration($configuration: json!, $id: uuid!) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { configuration: $configuration }
  ) {
    ...FlickFragment
  }
}

mutation UpdateFragmentState(
  $editorState: json!
  $id: uuid!
  $configuration: json!
) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { editorState: $editorState, configuration: $configuration }
  ) {
    id
  }
}

mutation InsertParticipantToFragment(
  $participantId: uuid!
  $fragmentId: uuid!
) {
  InviteParticipantToFragment(
    fragmentId: $fragmentId
    participantId: $participantId
  ) {
    createdAt
  }
}

mutation AddFragment(
  $name: String!
  $flickId: uuid!
  $type: FragmentTypeEnum!
) {
  CreateFragment(flickId: $flickId, name: $name, type: $type) {
    fragmentId
    type
  }
}

mutation UpdateFragmentConfiguration($fragmentId: uuid!, $items: json!) {
  UpdateFragmentConfiguration(fragmentId: $fragmentId, items: $items) {
    success
  }
}

mutation DeleteFragment($id: uuid!) {
  delete_Fragment_by_pk(id: $id) {
    id
  }
}

mutation ReorderFragment($fragmentIds: [uuid!]!, $flick_id: uuid!) {
  ReorderFragments(fragmentIds: $fragmentIds, flickId: $flick_id) {
    success
  }
}

mutation UpdateFragment(
  $fragmentId: String!
  $name: String
  $description: String
  $order: Int
) {
  UpdateFragment(
    fragmentId: $fragmentId
    name: $name
    description: $description
    order: $order
  ) {
    id
  }
}

mutation UpdateParticipants($fragmentId: String!, $participantIds: [String!]!) {
  UpdateFragmentParticipants(
    fragmentId: $fragmentId
    participantIds: $participantIds
  ) {
    added
    removed
  }
}

mutation UpdateFragmentMarkdown($fragmentId: uuid!, $md: String = "") {
  update_Fragment_by_pk(pk_columns: { id: $fragmentId }, _set: { md: $md }) {
    md
  }
}

mutation CompleteFragment(
  $duration: Int!
  $flickId: uuid!
  $fragmentId: uuid!
  $orientation: OrientationEnum!
  $producedLink: String!
) {
  CompleteFragment(
    flickId: $flickId
    fragmentId: $fragmentId
    orientation: $orientation
    producedLink: $producedLink
    duration: $duration
  ) {
    success
  }
}

mutation UpdateFragmentEditorState($id: uuid!, $editorState: json!) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { editorState: $editorState }
  ) {
    id
  }
}

mutation SetupRecording(
  $contentType: CONTENT_TYPES!
  $editorState: json!
  $flickId: uuid!
  $fragmentId: uuid!
  $viewConfig: json!
) {
  StartRecording(
    contentType: $contentType
    flickId: $flickId
    fragmentId: $fragmentId
    editorState: $editorState
    viewConfig: $viewConfig
  ) {
    recordingId
    success
  }
}

mutation SaveRecordedBlock(
  $flickId: uuid!
  $fragmentId: uuid!
  $objectUrl: String!
  $recordingId: uuid!
  $blockId: String!
  $thumbnail: String
  $playbackDuration: Float
) {
  SaveBlock(
    flickId: $flickId
    fragmentId: $fragmentId
    objectUrl: $objectUrl
    recordingId: $recordingId
    thumbnail: $thumbnail
    blockId: $blockId
    playbackDuration: $playbackDuration
  ) {
    id
    success
  }
}

mutation SaveMultipleBlocks(
  $blocks: [json]!
  $flickId: uuid!
  $fragmentId: uuid!
  $recordingId: uuid!
  $url: String!
) {
  SaveMultiBlocks(
    blocks: $blocks
    flickId: $flickId
    fragmentId: $fragmentId
    recordingId: $recordingId
    url: $url
  ) {
    success
  }
}

mutation DeleteBlockGroup($objectUrl: String!, $recordingId: uuid!) {
  RetakeMultiBlocks(objectUrl: $objectUrl, recordingId: $recordingId) {
    success
  }
}

mutation UpdateNotesAndEditor(
  $fragmentId: uuid!
  $editorState: json!
  $encodedEditorValue: String!
) {
  update_Fragment_by_pk(
    pk_columns: { id: $fragmentId }
    _set: { editorState: $editorState, encodedEditorValue: $encodedEditorValue }
  ) {
    id
  }
}

mutation UpdateThumbnail($id: uuid!, $thumbnailConfig: json!) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { thumbnailConfig: $thumbnailConfig }
  ) {
    id
  }
}

mutation UpdateThumbnailObject($id: uuid!, $thumbnailObject: String!) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { thumbnailObject: $thumbnailObject }
  ) {
    id
  }
}

mutation UpdatePublish($id: uuid!, $publishConfig: json!) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: { publishConfig: $publishConfig }
  ) {
    id
  }
}

mutation PublishVideoAction(
  $data: json!
  $fragmentId: uuid!
  $recordingId: uuid!
  $publishToYoutube: Boolean
) {
  PublishVideo(
    data: $data
    fragmentId: $fragmentId
    recordingId: $recordingId
    publishToYoutube: $publishToYoutube
  ) {
    success
  }
}

mutation DuplicateFragment(
  $configuration: json
  $description: String
  $editorState: json
  $editorValue: json
  $encodedEditorValue: String
  $flickId: uuid
  $type: FRAGMENT_TYPE_ENUM_enum
) {
  insert_Fragment_one(
    object: {
      configuration: $configuration
      description: $description
      editorState: $editorState
      editorValue: $editorValue
      encodedEditorValue: $encodedEditorValue
      flickId: $flickId
      type: $type
    }
  ) {
    id
    name
    type
  }
}

mutation MoveOrCopyBlocks(
  $id: uuid!
  $encodedEditorValue: String!
  $editorState: json!
  $configuration: json!
) {
  update_Fragment_by_pk(
    pk_columns: { id: $id }
    _set: {
      encodedEditorValue: $encodedEditorValue
      editorState: $editorState
      configuration: $configuration
    }
  ) {
    id
  }
}

mutation UpdateNotebookVersion($fragmentId: uuid!) {
  UpdateNotebookVer(fragmentId: $fragmentId) {
    success
  }
}
