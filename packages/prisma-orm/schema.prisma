generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Asset {
  id                String            @id @default(uuid())
  ownerId           String
  displayName       String?
  objectLink        String            @unique
  type              String
  metadata          Json?             @db.Json
  organisationId    String?
  source            String
  createdAt         DateTime          @default(now()) @db.Timestamp(6)
  updatedAt         DateTime          @default(now()) @db.Timestamp(6)
  deletedAt         DateTime?         @db.Timestamp(6)
  transformations   Json?             @db.Json
  Organisation      Organisation?     @relation(fields: [organisationId], references: [slug], onDelete: Restrict)
  User              User              @relation(fields: [ownerId], references: [sub], onDelete: Cascade)
  ASSET_SOURCE_ENUM ASSET_SOURCE_ENUM @relation(fields: [source], references: [value], onDelete: SetNull, map: "Artifact_source_fkey")
  ASSET_TYPE_ENUM   ASSET_TYPE_ENUM   @relation(fields: [type], references: [value], onDelete: SetNull, map: "Artifact_type_fkey")
  Asset_Fragment    Asset_Fragment[]

  @@index([ownerId])
}

model Asset_Fragment {
  assetId    String
  fragmentId String
  Asset      Asset    @relation(fields: [assetId], references: [id], map: "Artifact_Fragment_artifactId_fkey")
  Fragment   Fragment @relation(fields: [fragmentId], references: [id], map: "Artifact_Fragment_fragmentId_fkey")

  @@id([assetId, fragmentId])
}

model ASSET_SOURCE_ENUM {
  value       String  @id
  description String?
  Asset       Asset[]
}

model ASSET_TYPE_ENUM {
  value       String  @id
  description String?
  Asset       Asset[]
}

model BLOCK_PARTICIPANT_ENUM {
  value       String @id
  description String
}

model Block_Participants {
  blockId       String
  participantId String
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([blockId, participantId])
}

model Blocks {
  id               String
  fragmentId       String
  flickId          String
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @db.Timestamp(6)
  creationMeta     Json?     @db.Json
  objectUrl        String?
  deletedAt        DateTime? @db.Timestamp(6)
  playbackDuration Float?    @db.Float()
  recordingId      String
  thumbnail        String?
  Flick            Flick     @relation(fields: [flickId], references: [id], onDelete: Cascade)
  Fragment         Fragment  @relation(fields: [fragmentId], references: [id], onDelete: Cascade)
  Recording        Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@id([id, recordingId])
  @@index([flickId, fragmentId])
}

model Branding {
  id       String  @id @default(uuid())
  name     String
  branding Json?
  userSub  String
  User     User    @relation(fields: [userSub], references: [sub], onDelete: Cascade)
  Flick    Flick[]

  @@index([userSub])
}

model Content {
  id                String            @id @default(uuid())
  type              String
  flickId           String
  seriesId          String?
  published_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at        DateTime          @default(now()) @db.Timestamp(6)
  isPublic          Boolean           @default(true)
  thumbnail         String?
  preview           String?
  resource          String
  data              Json?             @db.Json
  fragmentId        String?           @unique
  Flick             Flick             @relation(fields: [flickId], references: [id], onDelete: Cascade)
  Fragment          Fragment?         @relation(fields: [fragmentId], references: [id], onDelete: Cascade)
  Series            Series?           @relation(fields: [seriesId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  CONTENT_TYPE_ENUM CONTENT_TYPE_ENUM @relation(fields: [type], references: [value], onUpdate: Restrict)
  Mux_Assets        Mux_Assets[]

  @@index([flickId, seriesId])
}

model CONTENT_TYPE_ENUM {
  value       String      @id
  description String?
  Content     Content[]
  Recording   Recording[]
}

model DEVIntegration {
  id          String    @id @default(uuid())
  accessToken String?
  userSub     String
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  User        User      @relation(fields: [userSub], references: [sub], onDelete: Cascade)
}

model Email_Lists {
  id          String  @id @default(uuid())
  entity_type String
  userSub     String?
  seriesId    String?
  Series      Series? @relation(fields: [seriesId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  User        User?   @relation(fields: [userSub], references: [sub], onDelete: Restrict, onUpdate: Restrict)
}

model Flick {
  name             String          @db.VarChar(255)
  description      String?         @db.VarChar(1000)
  id               String          @id @default(uuid()) @db.VarChar(191)
  updatedAt        DateTime        @default(now()) @db.Timestamp(6)
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  lobbyPicture     String?
  status           String          @default("Draft")
  scope            String          @default("Public") @db.VarChar(255)
  joinLink         String          @unique @default(uuid())
  producedLink     String?
  deletedAt        DateTime?       @db.Timestamp(6)
  ownerSub         String
  organisationSlug String?
  previewLink      String?
  configuration    Json?           @default("{ \"themeId\": 0 }") @db.Json
  thumbnail        String?         @db.Text
  youtubeLink      String?
  publishedAt      DateTime?       @db.Timestamp(6)
  interactions     Json?           @db.Json
  topicTags        String?         @db.VarChar(255)
  useBranding      Boolean         @default(false)
  brandingId       String?         @db.VarChar(191)
  downloadTasks    Json?
  themeName        String          @default("DarkGradient") @db.Text
  dirty            Boolean         @default(true)
  creationFlow     String          @default("Notebook") @db.VarChar(255)
  md               String?         @db.LongText
  Branding         Branding?       @relation(fields: [brandingId], references: [id], onUpdate: NoAction)
  Organisation     Organisation?   @relation(fields: [organisationSlug], references: [slug], onDelete: Cascade, map: "Flick_organisationId_fkey")
  Theme            Theme           @relation(fields: [themeName], references: [name], onUpdate: Cascade, onDelete: NoAction, map: "Flick_themeId_fkey")
  Owner            User            @relation(fields: [ownerSub], references: [sub], onDelete: Cascade, onUpdate: Cascade)
  Participants     Participant[]
  Blocks           Blocks[]
  Content          Content[]
  FlickActivity    FlickActivity[]
  Flick_Claps      Flick_Claps[]
  Flick_Series     Flick_Series[]
  Fragment         Fragment[]
  Integrations     Integrations[]
  Invitations      Invitations[]
  Recording        Recording[]
  Subscription     Subscription[]

  @@index([ownerSub, joinLink, organisationSlug])
}

model FlickActivity {
  createdAt                DateTime                 @default(now()) @db.Timestamp(6)
  title                    String
  description              String
  type                     String
  flickId                  String
  fragmentId               String?
  id                       String                   @id @unique @default(uuid())
  Flick                    Flick                    @relation(fields: [flickId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Notifications_flickId_fkey")
  Fragment                 Fragment?                @relation(fields: [fragmentId], references: [id], onDelete: Cascade)
  FLICK_ACTIVITY_TYPE_ENUM FLICK_ACTIVITY_TYPE_ENUM @relation(fields: [type], references: [value], onDelete: NoAction)
}

model FLICK_ACTIVITY_TYPE_ENUM {
  value         String          @id
  description   String?
  FlickActivity FlickActivity[]
}

model Flick_Claps {
  flickId   String
  userId    String
  clapCount Int    @default(0)
  Flick     Flick  @relation(fields: [flickId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  User      User   @relation(fields: [userId], references: [sub], onDelete: Cascade)

  @@id([flickId, userId])
}

model Flick_Series {
  flickId  String
  seriesId String
  order    Int
  Flick    Flick  @relation(fields: [flickId], references: [id], onDelete: Cascade)
  Series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  @@id([flickId, seriesId])
}

model Follow {
  targetId                     String
  followerId                   String
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  User_Follow_followerIdToUser User     @relation("Follow_followerIdToUser", fields: [followerId], references: [sub], onDelete: Cascade)
  User_Follow_targetIdToUser   User     @relation("Follow_targetIdToUser", fields: [targetId], references: [sub], onDelete: Cascade)

  @@id([targetId, followerId])
}

model Fonts {
  id      String @id @default(uuid())
  family  String
  userSub String
  url     String
  User    User   @relation(fields: [userSub], references: [sub], onDelete: Cascade)
}

model Fragment {
  id                   String                 @id @default(uuid())
  name                 String?
  description          String?
  type                 String?                @default("Landscape")
  flickId              String
  configuration        Json?                  @db.Json
  producedLink         String?
  createdAt            DateTime?              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?              @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  order                Int?
  status               String                 @default("Draft")
  duration             Float?
  templateId           String?
  producedShortsLink   String?
  editorState          Json?                  @db.Json
  shortsDuration       Float?
  md                   String?
  thumbnailConfig      Json?                  @db.Json
  editorValue          Json?                  @db.Json
  encodedEditorValue   String?                @db.LongText
  thumbnailObject      String?
  publishConfig        Json?                  @db.Json
  version              Decimal                @default(2) @db.Decimal
  Flick                Flick                  @relation(fields: [flickId], references: [id], onDelete: Cascade)
  FRAGMENT_STATUS_ENUM FRAGMENT_STATUS_ENUM   @relation(fields: [status], references: [value], onDelete: Cascade)
  Template             Template?              @relation(fields: [templateId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  FRAGMENT_TYPE_ENUM   FRAGMENT_TYPE_ENUM?    @relation(fields: [type], references: [value], onDelete: Cascade)
  Asset_Fragment       Asset_Fragment[]
  Blocks               Blocks[]
  Content              Content?
  FlickActivity        FlickActivity[]
  Fragment_Participant Fragment_Participant[]
  Recording            Recording[]

  @@index([flickId])
}

model Fragment_Participant {
  fragmentId    String
  participantId String
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime    @default(now()) @db.Timestamp(6)
  deletedAt     DateTime?   @db.Timestamp(6)
  Fragment      Fragment    @relation(fields: [fragmentId], references: [id], onDelete: Cascade)
  Participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([fragmentId, participantId])
}

model FRAGMENT_STATUS_ENUM {
  value       String     @id
  description String?
  Fragment    Fragment[]
}

model FRAGMENT_TYPE_ENUM {
  value       String     @id
  description String?
  Fragment    Fragment[]
}

model GitHubIntegration {
  id          String    @id @default(uuid())
  userSub     String    @unique
  accessToken String    @unique
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  scope       String
  branch      String?
  repository  String?
  User        User      @relation(fields: [userSub], references: [sub], onDelete: Cascade)
}

model HashnodeIntegration {
  id          String    @id @default(uuid())
  userSub     String
  accessToken String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  username    String
  User        User      @relation(fields: [userSub], references: [sub], onDelete: Cascade)
}

model Integrations {
  id        String @id @default(uuid())
  groupId   String
  channelId String
  flickId   String
  source    String
  Flick     Flick  @relation(fields: [flickId], references: [id], onUpdate: Restrict)
}

model Invitations {
  senderId                          String
  receiverId                        String
  flickId                           String?
  seriesId                          String?
  status                            String
  type                              String
  message                           String?  @db.VarChar(255)
  created_at                        DateTime @default(now()) @db.Timestamp(6)
  updated_at                        DateTime @default(now()) @db.Timestamp(6)
  id                                String   @id @default(uuid())
  Flick                             Flick?   @relation(fields: [flickId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  User_Invitations_receiverIdToUser User     @relation("Invitations_receiverIdToUser", fields: [receiverId], references: [sub], onDelete: Cascade)
  User_Invitations_senderIdToUser   User     @relation("Invitations_senderIdToUser", fields: [senderId], references: [sub], onDelete: Cascade)
  Series                            Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([senderId, receiverId, flickId])
  @@index([senderId, receiverId])
}

model MagicLink {
  id         String   @id @default(uuid())
  userSub    String
  state      String?  @unique(map: "MagicLink_token_key")
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
  usageCount Int      @default(0)
  User       User     @relation(fields: [userSub], references: [sub], onDelete: Cascade)

  @@index([userSub, state])
}

model Member {
  id               String           @id @default(uuid())
  role             String           @default("Member")
  userSub          String
  createdAt        DateTime         @default(now()) @db.Timestamp(6)
  updatedAt        DateTime         @default(now()) @db.Timestamp(6)
  deletedAt        DateTime?        @db.Timestamp(6)
  organisationSlug String
  Organisation     Organisation     @relation(fields: [organisationSlug], references: [slug], onDelete: Cascade)
  MEMBER_ROLE_ENUM MEMBER_ROLE_ENUM @relation(fields: [role], references: [value], onUpdate: Restrict)
  User             User             @relation(fields: [userSub], references: [sub], onDelete: Cascade)

  @@unique([organisationSlug, userSub])
  @@index([organisationSlug, userSub])
}

model MEMBER_ROLE_ENUM {
  value       String   @id
  description String?
  Member      Member[]
}

model Mux_Assets {
  s3Object          String
  muxAssetId        String
  muxPlaybackId     String
  muxPlaybackPolicy String
  muxAssetStatus    String
  contentId         String    @unique
  id                String    @id @default(uuid())
  created_at        DateTime? @unique @default(now()) @db.Timestamp(6)
  Content           Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model Notifications {
  id                                  String    @id @default(uuid())
  senderId                            String
  receiverId                          String
  message                             String    @db.VarChar(255)
  meta                                Json?     @db.Json
  type                                String
  isRead                              Boolean   @default(false)
  metaType                            String?
  createdAt                           DateTime  @default(now()) @db.Timestamp(6)
  updatedAt                           DateTime? @default(now()) @db.Timestamp(6)
  User_Notifications_receiverIdToUser User      @relation("Notifications_receiverIdToUser", fields: [receiverId], references: [sub], onDelete: Cascade)
  User_Notifications_senderIdToUser   User      @relation("Notifications_senderIdToUser", fields: [senderId], references: [sub], onDelete: Cascade)

  @@index([receiverId])
}

model Organisation {
  name        String
  description String?
  picture     String?
  slug        String      @id @unique
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?   @db.Timestamp(6)
  ownerId     String?
  id          String      @default(uuid())
  Asset       Asset[]
  Flick       Flick[]
  Member      Member[]
  Series      Series[]
  SlackAuth   SlackAuth[]
}

model Participant {
  id                   String                 @id @default(uuid()) @db.VarChar(191)
  flickId              String                 @db.VarChar(191)
  userSub              String
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  deletedAt            DateTime?              @db.Timestamp(6)
  role                 String
  inviteStatus         String                 @default("Pending")
  status               String                 @default("NotJoined")
  updatedAt            DateTime               @default(now()) @db.Timestamp(6)
  User                 User                   @relation(fields: [userSub], references: [sub], onDelete: Cascade)
  Block_Participants   Block_Participants[]
  Fragment_Participant Fragment_Participant[]

  Flick Flick @relation(fields: [flickId], references: [id])

  @@index([flickId, userSub])
}

model Profile {
  id              String  @id @default(uuid())
  userSub         String  @unique
  coverImage      String?
  about           String? @db.VarChar(1000)
  tags            String  @db.VarChar(255)
  title           String  @default("Incredible Creator") @db.VarChar(100)
  githubProfile   String?
  hashnodeProfile String?
  mediumProfile   String?
  linkedinProfile String?
  twitterProfile  String?
  User            User    @relation(fields: [userSub], references: [sub], onDelete: Cascade)
}

model Recording {
  id                String             @id @default(uuid())
  url               String?
  editorState       Json?              @db.Json
  viewConfig        Json?              @db.Json
  flickId           String
  fragmentId        String
  thumbnail         String?
  storyboard        String?
  status            String
  checkpoint        Json?              @db.Json
  type              String?
  Flick             Flick              @relation(fields: [flickId], references: [id], onDelete: Cascade)
  Fragment          Fragment           @relation(fields: [fragmentId], references: [id], onDelete: Cascade)
  CONTENT_TYPE_ENUM CONTENT_TYPE_ENUM? @relation(fields: [type], references: [value], onDelete: Restrict)
  Blocks            Blocks[]
  YoutubeUploads    YoutubeUploads?

  @@index([flickId, fragmentId])
}

model Series {
  id               String         @id @default(uuid())
  name             String
  description      String?
  picture          String?
  createdAt        DateTime       @default(now()) @db.Timestamp(6)
  updatedAt        DateTime       @default(now()) @db.Timestamp(6)
  deletedAt        DateTime?      @db.Timestamp(6)
  organisationSlug String?
  ownerSub         String
  splashId         String?
  scope            String         @default("Private")
  Organisation     Organisation?  @relation(fields: [organisationSlug], references: [slug], onDelete: Cascade)
  User             User           @relation(fields: [ownerSub], references: [sub], onDelete: Cascade)
  Content          Content[]
  Email_Lists      Email_Lists[]
  Flick_Series     Flick_Series[]
  Invitations      Invitations[]
  Series_Stars     Series_Stars[]
  Subscription     Subscription[]

  @@index([organisationSlug, ownerSub])
}

model Series_Stars {
  userId   String
  seriesId String
  Series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  User     User   @relation(fields: [userId], references: [sub], onDelete: Cascade, onUpdate: Restrict)

  @@id([userId, seriesId])
}

model SlackAuth {
  id               String          @id @default(uuid())
  state            String?         @default(uuid())
  organizationSlug String
  enabled          Boolean         @default(true)
  channels         String
  Organisation     Organisation    @relation(fields: [organizationSlug], references: [slug], onUpdate: Restrict)
  SlackChannels    SlackChannels[]
}

model SlackChannels {
  channelId   String    @id
  workspaceId String
  channelName String
  SlackAuth   SlackAuth @relation(fields: [workspaceId], references: [id], onUpdate: Restrict)
}

model Subscription {
  id        String   @id @default(uuid())
  email     String
  seriesId  String?
  userSub   String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  flickId   String?
  Flick     Flick?   @relation(fields: [flickId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  User      User?    @relation(fields: [userSub], references: [sub], onDelete: Restrict, onUpdate: Restrict)

  @@index([email, seriesId, userSub])
}

model Template {
  id       String     @id @default(uuid())
  manifest Json?      @db.Json
  Fragment Fragment[]
}

model Theme {
  name   String  @id
  config Json    @db.Json
  Flick  Flick[]
}

model Transition {
  name   String @id
  config Json   @db.Json
}

model User {
  sub                            String                @id
  displayName                    String?
  email                          String?               @unique
  picture                        String?
  createdAt                      DateTime              @default(now()) @db.Timestamp(6)
  username                       String                @unique
  updatedAt                      DateTime?             @default(now()) @db.Timestamp(6)
  deletedAt                      DateTime?             @db.Timestamp(6)
  onboarded                      Boolean               @default(false)
  provider                       String?
  verified                       Boolean               @default(false)
  state                          String?               @unique
  branding                       Json?
  designation                    String?
  organization                   String?
  preferences                    Json?                 @db.Json
  referred_by                    String?
  User                           User?                 @relation("UserToUser_referred_by", fields: [referred_by], references: [sub], onDelete: Restrict, onUpdate: Restrict)
  Asset                          Asset[]
  Branding                       Branding[]
  DEVIntegration                 DEVIntegration[]
  Email_Lists                    Email_Lists[]
  Flick_Claps                    Flick_Claps[]
  Follow_followerIdToUser        Follow[]              @relation("Follow_followerIdToUser")
  Follow_targetIdToUser          Follow[]              @relation("Follow_targetIdToUser")
  Fonts                          Fonts[]
  GitHubIntegration              GitHubIntegration?
  HashnodeIntegration            HashnodeIntegration[]
  Invitations_receiverIdToUser   Invitations[]         @relation("Invitations_receiverIdToUser")
  Invitations_senderIdToUser     Invitations[]         @relation("Invitations_senderIdToUser")
  MagicLink                      MagicLink[]
  Member                         Member[]
  Notifications_receiverIdToUser Notifications[]       @relation("Notifications_receiverIdToUser")
  Notifications_senderIdToUser   Notifications[]       @relation("Notifications_senderIdToUser")
  Participant                    Participant[]
  Profile                        Profile?
  Series                         Series[]
  Series_Stars                   Series_Stars[]
  Subscription                   Subscription[]
  other_User                     User[]                @relation("UserToUser_referred_by")
  YoutubeIntegration             YoutubeIntegration?
  Flick                          Flick[]

  @@index([sub, email])
}

model YoutubeIntegration {
  id         String   @id @default(uuid())
  userInfo   Json     @db.Json
  tokens     Json     @db.Json
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  userSub    String   @unique
  User       User     @relation(fields: [userSub], references: [sub], onDelete: Cascade)

  @@index([userSub])
}

model YoutubeUploads {
  id          String    @id @default(uuid())
  status      String    @default("pending")
  ytMeta      Json?     @db.Json
  ytUrl       String?
  recordingId String    @unique
  Recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@index([recordingId])
}
